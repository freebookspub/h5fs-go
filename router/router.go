package router

import (
	"net/http"

	_ "h5fs/docs" // docs is generated by Swag CLI, you have to import it.
	"h5fs/handler/login"
	"h5fs/handler/sd"
	"h5fs/handler/webapis"
	"h5fs/router/middleware"

	"github.com/gin-contrib/pprof"
	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

// Load loads the middlewares, routes, handlers.
func Load(g *gin.Engine, mw ...gin.HandlerFunc) *gin.Engine {
	// Middlewares.
	g.Use(gin.Recovery())
	g.Use(middleware.NoCache)
	g.Use(middleware.Options)
	g.Use(middleware.Secure)
	g.Use(mw...)
	// 404 Handler.
	g.NoRoute(func(c *gin.Context) {
		c.String(http.StatusNotFound, "The incorrect API route.")
	})

	// swagger api docs
	g.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// pprof router
	pprof.Register(g)

	// The health check handlers
	svcd := g.Group("/sd")
	{
		svcd.GET("/health", sd.HealthCheck)
		svcd.GET("/disk", sd.DiskCheck)
		svcd.GET("/cpu", sd.CPUCheck)
		svcd.GET("/ram", sd.RAMCheck)
	}

	g.POST("/api/v1/user/login", login.Login)
	web := g.Group("/api/v1/user")
	web.Use(middleware.AuthMiddleware())
	{
		web.GET("/info", login.UserInfo)
	}

	// web api interface
	webapp := g.Group("/api/v1")
	{
		webapp.POST("/register", login.Register)
		webapp.GET("/lists", webapis.GetIndexListsHandler)
		webapp.GET("/indexOne/:id", webapis.GetIndexOneHandler)
		webapp.GET("/news/:id", webapis.GetNewsHandler)
		webapp.GET("/posts/:uuid", webapis.GetNewsPostsHandler)
		webapp.GET("/category", webapis.GetCategoryLists)
		webapp.GET("/read/:id", webapis.GetReadHandler)
		webapp.GET("/tags/:id", webapis.GetTagsListsHandler)
	}

	return g
}
